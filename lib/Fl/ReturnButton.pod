=pod

=head1 NAME

Fl::ReturnButton - Button with a Check Box

=head1 Synopsis

    use Fl;
    my $button = Fl::ReturnButton->new(0, 0, 100, 200, 'Hello, World!');
    $button->callback(sub {print q[It's dat boi]} );

=head1 Description

The Fl::ReturnButton class represents a button that triggers a callback when
pressed as well as whenever the user presses the Enter key. The
carriage-return symbol is drawn to the right of the button label.

=for html <center><img src="http://www.fltk.org/doc-1.3/Fl_Return_Button.png" /></center>

=head1 Methods

Fl::ReturnButton inherits from Fl::Button which in turns inherits from
Fl::Widget. On top of that, it exposes the following methods...

=cut

#include <FL/Fl_Return_Button.H>

MODULE = Fl::ReturnButton        PACKAGE = Fl::ReturnButton       PREFIX = Fl_

PROTOTYPES: DISABLE

=pod

=head2 new(...)

    my $button_a = Fl::ReturnButton->new(0, 0, 250, 500, 'Important Stuff');
    my $button_b = Fl::ReturnButton->new(0, 0, 250, 500);

The constructor creates a new button using the given position, size, and
label.

The destructor removes the button.

=cut

Fl_Return_Button *
Fl_Return_Button::new( ... )
    CASE: (items == 5 || items == 6)
        CODE:
            /*(int x, int y, int w, int h, char * label = $0)*/
            char * label = "";
            int x = (int)SvIV(ST(1));
            int y = (int)SvIV(ST(2));
            int w = (int)SvIV(ST(3));
            int h = (int)SvIV(ST(4));
            if (items == 6) label = (char *)SvPV_nolen(ST(5));
            RETVAL = new Fl_Return_Button(x,y,w,h,label);
        OUTPUT:
            RETVAL

void
Fl_Return_Button::DESTROY()
    CODE:
        int refcount = SvREFCNT(SvRV(ST(0)));
        if (refcount == 1) {
            delete THIS;
        }
        else {
            SvREFCNT_dec(ST(0));
        }

MODULE = Fl        PACKAGE = Fl

BOOT:
    set_isa("Fl::ReturnButton", "Fl::Button");

=pod

=head1 LICENSE

Copyright (C) Sanko Robinson.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 AUTHOR

Sanko Robinson E<lt>sanko@cpan.orgE<gt>

=cut
